{"version":3,"sources":["services/GetJobs.js","services/CallSpring.js","view/jsx/Header.jsx","view/jsx/Footer.jsx","view/jsx/SearchProduct.jsx","view/jsx/ListProducts.jsx","view/jsx/InvokeBackend.jsx","view/jsx/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","getJobs","fetch","searchJobs","uuid","callBackend","Header","react_default","a","createElement","Container","Navbar","bg","variant","className","react_router_dom","activeClassName","to","Form","inline","FormControl","type","placeholder","Button","React","Component","Footer","Nav","justified","NavItem","eventkey","title","require","SearchProduct","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchedjobs","_this2","searchToken","then","res","json","data","console","log","JSON","stringify","setState","related_job_titles","catch","e","target","value","_this3","Group","controlId","Label","Control","onChange","readTextBoxValue","onClick","fireSearchAPI","map","index","key","fetchJobs","ListProducts","jobs","splice","length","InvokeBackend","backendData","source","createHistory","createBrowserHistory","App","history","react_router","jsx_Header","exact","path","component","jsx_Footer","Boolean","window","location","hostname","match","ReactDOM","render","jsx_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cae321a.chunk.js","sourcesContent":["const getJobs = () => {\n    return fetch('http://api.dataatwork.org/v1/jobs');\n}\n\nconst searchJobs = (uuid) => {\n    return fetch('http://api.dataatwork.org/v1/jobs/' + uuid + '/related_jobs') //using fetch as its esc default\n}\nmodule.exports.getJobs = getJobs;\nmodule.exports.searchJobs = searchJobs;","const callBackend = () => {\n    return fetch('http://localhost:8085/rest/server');\n}\n\nmodule.exports.callBackend = callBackend;","import React from 'react';\n\nimport { Navbar, Nav, NavItem, Form, FormControl, Button, Container } from 'react-bootstrap';\nimport { NavLink } from 'react-router-dom';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Navbar bg=\"light\" variant=\"light\">\n          <nav className=\"mr-auto\" >\n\n            <NavLink className=\"main-anchor\" activeClassName=\"selected\" to=\"/\">Home</NavLink> | &nbsp;\n             <NavLink className=\"main-anchor\" activeClassName=\"selected\" to=\"/list\">ListProducts</NavLink> | &nbsp;\n             <NavLink className=\"main-anchor\" activeClassName=\"selected\" to=\"/search\">Search</NavLink> | &nbsp;\n             <NavLink className=\"main-anchor\" activeClassName=\"selected\" to=\"/spring\">Backend</NavLink>\n          </nav>\n          <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-primary\">Search</Button>\n          </Form>\n        </Navbar>\n      </Container>\n    );\n  }\n}\n\n\nexport default Header;","import React from 'react';\nimport { Nav, NavItem, Container } from 'react-bootstrap';\n\nfunction Footer(/*props*/) {\n  return (\n    <Container>\n      <footer>\n\n        <Nav justified>\n          <NavItem\n            eventkey={1}>\n\n          </NavItem>\n          <NavItem\n            eventkey={2}\n            title=\"Item\">\n\n          </NavItem>\n          <NavItem\n            eventkey={3}>\n\n          </NavItem>\n        </Nav>\n\n        <div className=\"text-center small copyright\">\n          Â© CHANDAN 2019\n        </div>\n      </footer>\n    </Container>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport { Form,Button } from 'react-bootstrap';\nconst searchJobs=require(\"../../services/GetJobs\").searchJobs;\nclass SearchProduct extends React.Component {\n\n    constructor(props) {\n        super(props);\n       this.state = {searchedjobs:[]};//using vanilla state as its a simple use case should use redux insted\n      }\n\n    fireSearchAPI() {\n        let uuid=this.state.searchToken;\n        searchJobs(uuid)//using fetch as its esc default\n        .then(res => res.json())\n        .then((data) => {\n            console.log(JSON.stringify(data))\n            this.setState({ searchedjobs: data.related_job_titles })\n        })\n        .catch(console.log);\n\n      }\n       readTextBoxValue(e){\n        //console.log(e.target.value)\n        this.setState({searchToken:e.target.value});\n      }\n\n\n    render() {\n        \n        return (\n            <div>\n            <Form>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label inline >Email address</Form.Label>\n                    <Form.Control inline type=\"test\" placeholder=\"Job UUID\" onChange={e=>this.readTextBoxValue(e)}/>\n                    <Button inline variant=\"primary\" onClick={(e)=>this.fireSearchAPI()}>Search</Button>\n                </Form.Group>\n            </Form>\n            <div>\n                {this.state.searchedjobs.map((value, index) => {\n                        return <li key={value.uuid}>{value.title}</li>\n                })}\n            </div>\n            </div>\n        );\n\n    }\n\n}\n\nexport default SearchProduct;","import React from 'react';\nconst fetchJobs=require(\"../../services/GetJobs\").getJobs\n\nclass ListProducts extends React.Component {\n    constructor(props) {\n        super(props);\n       this.state = {jobs:[]};//using vanilla state as its a simple use case should use redux insted\n      }\n      \n\n    componentDidMount() {\n        fetchJobs()//using fetch as its esc default\n            .then(res => res.json())\n            .then((data) => {\n                //console.log(JSON.stringify(data))\n                this.setState({ jobs: data.splice(0,data.length-1) })\n            })\n            .catch(console.log);\n    }\n    render() {\n        const items = this.state.jobs;\n\n        return (\n            <div>\n                <ol>\n                    {this.state.jobs.map((value, index) => {\n                        return <li key={value.uuid}>{value.title} => UUID: {value.uuid}</li>\n                    })}\n                </ol>\n            </div>\n        );\n    }\n}\n\nexport default ListProducts;","import React from 'react';\nconst callBackend=require(\"../../services/CallSpring\").callBackend\n\nclass InvokeBackend extends React.Component {\n    constructor(props) {\n        super(props);\n       this.state = {backendData:{}};//using vanilla state as its a simple use case should use redux insted\n      }\n      \n\n    componentDidMount() {\n        callBackend()//using fetch as its esc default\n            .then(res => res.json())\n            .then((data) => {\n                console.log(JSON.stringify(data))\n                this.setState({ backendData: data})\n            })\n            .catch(console.log);\n    }\n    render() {\n        const data = this.state.backendData;\n\n        return (\n            <div>\n                <ol>\n                  {data.source}\n                </ol>\n            </div>\n        );\n    }\n}\n\nexport default InvokeBackend;","import React from 'react';\nimport { Container } from 'react-bootstrap';\n//import { Glyphicon } from 'react-bootstrap';\nimport Header from './Header.jsx';\nimport Footer from './Footer.jsx';\n\nimport SearchProduct from './SearchProduct.jsx';\nimport ListProducts from './ListProducts.jsx';\nimport InvokeBackend from './InvokeBackend.jsx';\n/* import {\n    BrowserRouter as Router,\n    Link,\n    Route,\n    Switch,\n  } from 'react-router-dom'; */\n\nimport { Router, Route, Switch } from 'react-router';\nconst createHistory = require(\"history\").createBrowserHistory;\nclass App extends React.Component {\n    render() {\n        const history = createHistory();\n        return (\n            <div>\n                <Router history={history}>\n                    <Header />\n                    <Container>\n                        <div>\n                            <Switch>\n                                <Route exact path=\"/\" component={SearchProduct} />\n                                <Route exact path=\"/search\" component={SearchProduct} />\n                                <Route exact path=\"/list\" component={ListProducts} />\n                                <Route exact path=\"/spring\" component={InvokeBackend} />\n                            </Switch>\n                        </div>\n                    </Container>\n                </Router>\n\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport './view/css/bootstrap.min.css'\nimport App from './view/jsx/App.jsx';\nimport './view/css/main.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}